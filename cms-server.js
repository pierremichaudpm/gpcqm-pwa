// GPCM CMS Server - Serveur pour la gestion des donn√©es

const express = require('express');
const fs = require('fs').promises;
const path = require('path');
const cors = require('cors');
const multer = require('multer');

const app = express();
const PORT = process.env.PORT || 3001;

// Configuration
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.static(path.join(__dirname)));

// Configuration de multer pour l'upload des images
const storage = multer.diskStorage({
    destination: async function (req, file, cb) {
        const dir = path.join(__dirname, 'images', 'jerseys');
        try {
            await fs.mkdir(dir, { recursive: true });
            cb(null, dir);
        } catch (error) {
            cb(error, null);
        }
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({ 
    storage: storage,
    limits: { fileSize: 5 * 1024 * 1024 }, // 5MB max
    fileFilter: function (req, file, cb) {
        const allowedTypes = /jpeg|jpg|png|gif|svg|webp/;
        const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
        const mimetype = allowedTypes.test(file.mimetype);
        
        if (mimetype && extname) {
            return cb(null, true);
        } else {
            cb(new Error('Seules les images sont autoris√©es'));
        }
    }
});

// Chemins des fichiers de donn√©es
const TEAMS_DATA_FILE = path.join(__dirname, 'cms', 'teams-data.json');
const RIDERS_JSON_FILE = path.join(__dirname, 'riders.json');
const RIDERS_JS_FILE = path.join(__dirname, 'listeengages-package', 'listeengages', 'js', 'riders.js');

// Fonction pour lire les donn√©es des √©quipes
async function readTeamsData() {
    try {
        const data = await fs.readFile(TEAMS_DATA_FILE, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        // Si le fichier n'existe pas, essayer de lire riders.json
        try {
            const ridersData = await fs.readFile(RIDERS_JSON_FILE, 'utf8');
            const parsed = JSON.parse(ridersData);
            return transformRidersData(parsed);
        } catch (err) {
            return [];
        }
    }
}

// Fonction pour sauvegarder les donn√©es des √©quipes
async function saveTeamsData(teams) {
    try {
        // Cr√©er le dossier cms s'il n'existe pas
        await fs.mkdir(path.dirname(TEAMS_DATA_FILE), { recursive: true });
        
        // Sauvegarder dans teams-data.json
        await fs.writeFile(TEAMS_DATA_FILE, JSON.stringify(teams, null, 2));
        
        // Mettre √† jour riders.json
        await updateRidersJson(teams);
        
        // Mettre √† jour riders.js
        await updateRidersJs(teams);
        
        return true;
    } catch (error) {
        console.error('Erreur lors de la sauvegarde:', error);
        throw error;
    }
}

// Transformer les donn√©es du format riders.json
function transformRidersData(data) {
    if (!data.teams) return [];
    
    const cleanTeams = [];
    const seenTeams = new Set();
    
    data.teams.forEach(team => {
        const teamName = team.name || team.displayName || '';
        
        if (seenTeams.has(teamName)) return;
        seenTeams.add(teamName);
        
        const cleanRiders = [];
        if (team.riders && Array.isArray(team.riders)) {
            team.riders.forEach(rider => {
                if (rider.name && !rider.name.includes('TEAM') && rider.name.trim() !== '') {
                    cleanRiders.push({
                        number: rider.number || '',
                        name: rider.name,
                        country: convertCountryCodeToFlag(rider.country) || ''
                    });
                }
            });
        }
        
        cleanTeams.push({
            id: team.id || Date.now() + Math.random(),
            name: teamName,
            displayName: team.displayName || teamName,
            country: convertCountryCodeToFlag(team.country) || '',
            riders: cleanRiders.slice(0, 7),
            jerseyPath: team.jerseyPath || ''
        });
    });
    
    return cleanTeams;
}

// Convertir les codes pays en emoji
function convertCountryCodeToFlag(code) {
    if (!code) return '';
    
    const countryCodeMap = {
        'FRA': 'üá´üá∑', 'USA': 'üá∫üá∏', 'GBR': 'üá¨üáß', 'GER': 'üá©üá™', 'DEU': 'üá©üá™',
        'ITA': 'üáÆüáπ', 'ESP': 'üá™üá∏', 'BEL': 'üáßüá™', 'NED': 'üá≥üá±', 'NLD': 'üá≥üá±',
        'AUS': 'üá¶üá∫', 'CAN': 'üá®üá¶', 'NOR': 'üá≥üá¥', 'DEN': 'üá©üá∞', 'DNK': 'üá©üá∞',
        'SUI': 'üá®üá≠', 'CHE': 'üá®üá≠', 'AUT': 'üá¶üáπ', 'POL': 'üáµüá±', 'POR': 'üáµüáπ',
        'PRT': 'üáµüáπ', 'CZE': 'üá®üáø', 'SVK': 'üá∏üá∞', 'SLO': 'üá∏üáÆ', 'SVN': 'üá∏üáÆ',
        'HUN': 'üá≠üá∫', 'ROU': 'üá∑üá¥', 'RUS': 'üá∑üá∫', 'UKR': 'üá∫üá¶', 'SWE': 'üá∏üá™',
        'FIN': 'üá´üáÆ', 'EST': 'üá™üá™', 'LAT': 'üá±üáª', 'LTU': 'üá±üáπ', 'IRL': 'üáÆüá™',
        'LUX': 'üá±üá∫', 'COL': 'üá®üá¥', 'ARG': 'üá¶üá∑', 'BRA': 'üáßüá∑', 'MEX': 'üá≤üáΩ',
        'JPN': 'üáØüáµ', 'KOR': 'üá∞üá∑', 'CHN': 'üá®üá≥', 'NZL': 'üá≥üáø', 'RSA': 'üáøüá¶',
        'UAE': 'üá¶üá™', 'KAZ': 'üá∞üáø', 'ISR': 'üáÆüá±', 'ECU': 'üá™üá®', 'ERI': 'üá™üá∑',
        'CRO': 'üá≠üá∑', 'HRV': 'üá≠üá∑', 'BHR': 'üáßüá≠', 'BIH': 'üáßüá¶'
    };
    
    return countryCodeMap[code.toUpperCase()] || '';
}

// Convertir emoji en code pays
function convertFlagToCountryCode(flag) {
    if (!flag) return '';
    
    const flagToCodeMap = {
        'üá´üá∑': 'FRA', 'üá∫üá∏': 'USA', 'üá¨üáß': 'GBR', 'üá©üá™': 'GER',
        'üáÆüáπ': 'ITA', 'üá™üá∏': 'ESP', 'üáßüá™': 'BEL', 'üá≥üá±': 'NED',
        'üá¶üá∫': 'AUS', 'üá®üá¶': 'CAN', 'üá≥üá¥': 'NOR', 'üá©üá∞': 'DEN',
        'üá®üá≠': 'SUI', 'üá¶üáπ': 'AUT', 'üáµüá±': 'POL', 'üáµüáπ': 'POR',
        'üá®üáø': 'CZE', 'üá∏üá∞': 'SVK', 'üá∏üáÆ': 'SLO', 'üá≠üá∫': 'HUN',
        'üá∑üá¥': 'ROU', 'üá∑üá∫': 'RUS', 'üá∫üá¶': 'UKR', 'üá∏üá™': 'SWE',
        'üá´üáÆ': 'FIN', 'üá™üá™': 'EST', 'üá±üáª': 'LAT', 'üá±üáπ': 'LTU',
        'üáÆüá™': 'IRL', 'üá±üá∫': 'LUX', 'üá®üá¥': 'COL', 'üá¶üá∑': 'ARG',
        'üáßüá∑': 'BRA', 'üá≤üáΩ': 'MEX', 'üáØüáµ': 'JPN', 'üá∞üá∑': 'KOR',
        'üá®üá≥': 'CHN', 'üá≥üáø': 'NZL', 'üáøüá¶': 'RSA', 'üá¶üá™': 'UAE',
        'üá∞üáø': 'KAZ', 'üáÆüá±': 'ISR', 'üá™üá®': 'ECU', 'üá™üá∑': 'ERI',
        'üá≠üá∑': 'CRO', 'üáßüá≠': 'BHR', 'üáßüá¶': 'BIH'
    };
    
    return flagToCodeMap[flag] || '';
}

// Mettre √† jour riders.json
async function updateRidersJson(teams) {
    const ridersData = {
        teams: teams.map(team => ({
            id: team.id,
            name: team.name,
            displayName: team.displayName,
            country: convertFlagToCountryCode(team.country),
            riders: team.riders.map(rider => ({
                number: rider.number,
                name: rider.name,
                country: convertFlagToCountryCode(rider.country)
            }))
        }))
    };
    
    await fs.writeFile(RIDERS_JSON_FILE, JSON.stringify(ridersData, null, 2));
}

// Mettre √† jour riders.js
async function updateRidersJs(teams) {
    const jsContent = `// === GPCQM 2025 - Riders Modal Management ===
// G√©n√©r√© automatiquement par le CMS - ${new Date().toISOString()}

// Donn√©es officielles des √©quipes et coureurs GPCQM 2025
const ridersData = {
    teams: ${JSON.stringify(teams.map(team => ({
        id: team.id,
        name: team.name,
        displayName: team.displayName,
        country: team.country,
        director: team.director || '',
        riders: team.riders || []
    })), null, 4)}
};

// Le reste du code JavaScript reste inchang√©...
`;

    try {
        // Lire le fichier existant pour pr√©server le code non-donn√©es
        const existingContent = await fs.readFile(RIDERS_JS_FILE, 'utf8');
        
        // Trouver o√π se termine la d√©finition de ridersData
        const endIndex = existingContent.indexOf('};', existingContent.indexOf('const ridersData')) + 2;
        
        if (endIndex > 2) {
            // Pr√©server tout le code apr√®s ridersData
            const preservedCode = existingContent.substring(endIndex);
            const newContent = jsContent + preservedCode;
            await fs.writeFile(RIDERS_JS_FILE, newContent);
        } else {
            // Si on ne trouve pas la structure, √©crire seulement les donn√©es
            await fs.writeFile(RIDERS_JS_FILE, jsContent);
        }
    } catch (error) {
        console.error('Erreur lors de la mise √† jour de riders.js:', error);
    }
}

// Routes API

// Obtenir toutes les √©quipes
app.get('/api/teams', async (req, res) => {
    try {
        const teams = await readTeamsData();
        res.json(teams);
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la lecture des donn√©es' });
    }
});

// Sauvegarder toutes les √©quipes
app.post('/api/teams', async (req, res) => {
    try {
        const teams = req.body;
        await saveTeamsData(teams);
        res.json({ success: true, message: 'Donn√©es sauvegard√©es avec succ√®s' });
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la sauvegarde des donn√©es' });
    }
});

// Upload d'image de maillot
app.post('/api/upload-jersey', upload.single('jersey'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: 'Aucun fichier upload√©' });
        }
        
        const jerseyPath = `/images/jerseys/${req.file.filename}`;
        res.json({ success: true, path: jerseyPath });
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de l\'upload du maillot' });
    }
});

// Obtenir une √©quipe sp√©cifique
app.get('/api/teams/:id', async (req, res) => {
    try {
        const teams = await readTeamsData();
        const team = teams.find(t => t.id == req.params.id);
        
        if (team) {
            res.json(team);
        } else {
            res.status(404).json({ error: '√âquipe non trouv√©e' });
        }
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la lecture des donn√©es' });
    }
});

// Mettre √† jour une √©quipe sp√©cifique
app.put('/api/teams/:id', async (req, res) => {
    try {
        const teams = await readTeamsData();
        const index = teams.findIndex(t => t.id == req.params.id);
        
        if (index !== -1) {
            teams[index] = { ...teams[index], ...req.body };
            await saveTeamsData(teams);
            res.json({ success: true, team: teams[index] });
        } else {
            res.status(404).json({ error: '√âquipe non trouv√©e' });
        }
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la mise √† jour' });
    }
});

// Supprimer une √©quipe
app.delete('/api/teams/:id', async (req, res) => {
    try {
        let teams = await readTeamsData();
        teams = teams.filter(t => t.id != req.params.id);
        await saveTeamsData(teams);
        res.json({ success: true, message: '√âquipe supprim√©e' });
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la suppression' });
    }
});

// Route pour servir le CMS
app.get('/cms', (req, res) => {
    res.sendFile(path.join(__dirname, 'cms.html'));
});

// Route pour servir les fichiers CSS et JS du CMS
app.use('/cms', express.static(path.join(__dirname, 'cms')));

// Route racine
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// D√©marrer le serveur
app.listen(PORT, () => {
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë         GPCM CMS Server                ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  Serveur d√©marr√© sur le port ${PORT}      ‚ïë
‚ïë                                        ‚ïë
‚ïë  Application principale:               ‚ïë
‚ïë  http://localhost:${PORT}                  ‚ïë
‚ïë                                        ‚ïë
‚ïë  CMS (Gestion des √©quipes):           ‚ïë
‚ïë  http://localhost:${PORT}/cms              ‚ïë
‚ïë                                        ‚ïë
‚ïë  API Endpoints:                        ‚ïë
‚ïë  GET    /api/teams                     ‚ïë
‚ïë  POST   /api/teams                     ‚ïë
‚ïë  PUT    /api/teams/:id                 ‚ïë
‚ïë  DELETE /api/teams/:id                 ‚ïë
‚ïë  POST   /api/upload-jersey             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
});
